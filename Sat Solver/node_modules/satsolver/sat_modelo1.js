  
 exports.solve = function solve (fileName) {
  let formula = readFormula(fileName)
  let result = doSolve(formula.clauses, formula.variables)
  return result 
}


function nextAssignment(currentAssignment) {
var b = 0
for(let a = 1; a <= currentAssignment.length - b; a++){//percorre todos os valores de números binários possíveis  = 2^n -1

  if(currentAssignment[currentAssignment.length -a]==false){
    currentAssignment[currentAssignment.length - a] = true
    b = currentAssignment.length
    for(let g = 1; g<a; g++){
      if(currentAssignment[currentAssignment.length-(a-g)]==true){
        currentAssignment[currentAssignment.length-(a-g)] = false
      }
    }
  }
}


  newAssignment = currentAssignment
  return newAssignment
}

function doSolve(clauses, assignment) {
  var sera = []
  var previousAssignments = []
  var assignmntLimit = Math.pow(2,assignment.length)//número limite de casos 2^n
  var assignmntNumber = 1
  let isSat = false
  while ((!isSat) && assignmntNumber<assignmntLimit){
    for(let a = 0; a< clauses.length ; a++){
      var c = false
      for(let b = 0; b< clauses[a].length ; b++){ //checa se existe alguma variável com valor true na cláusula. Se sim, passa para a próxima
          for(let d  = 0; d < assignment.length;d++){
            if(clauses[a][b] == (d+1) && assignment[d]== true){
              
              sera[a] = true
              d = assignment.length
              b = clauses[a].length
            }
            else if(clauses[a][b]==(d+1)*-1 && assignment[d]==false){
              sera[a] = true
              d = assignment.length
              b = clauses[a].length
            }else{
              sera[a] = false
            }
          }
    
      }
    }
    if(!sera.includes(false)){
      isSat = true
    }else{
    assignmntNumber++
    assignment = nextAssignment(assignment)
    }
  }
  let result = {'isSat': isSat, satisfyingAssignment: null}
  if (isSat) {
    result.satisfyingAssignment = assignment
  }
  console.log(result)
  return result
}

function readFormula(fileName) {

  const fs = require('fs')
  let text = fs.readFileSync(fileName,'utf8').trim().split(/[\r\n]+/) 

  var aux1 = []
  var opl = 0
  for(let i = 0; i < text.length ;i++){//gera um arrays sem os comentários e as especificações
      if(text[i].charAt(0)!='p' && text[i].charAt(0)!='c'){    
          aux1[opl] = text[i]
          opl++    
      }
  }
  var clauses = readClauses(aux1)


  for(let o = 0; o< clauses.length; o++){//remove os zeros
      clauses[o].splice(clauses[o].indexOf(clauses[o].lenght-1),1)
  }

  var aux2 = clauses

  for(let g = 0; g< aux2.length ;g++){//transforma todos os valores negativos em positivos para facilitar para o readVaraiables
    for(let h = 0; h< aux2[g].length ;h++){
      if(aux2[g][h]<0){
        let f =''
        f += aux2 [g][h] *-1

        aux2[g][h] =  f
      }
    }

  }

  let variables = readVariables(aux2)

  text = fs.readFileSync(fileName,'utf8').trim().split(/[\r\n]+/)//re-lê o texto para excecutar o readClauses novamente
  var aux3 = []
  var opl = 0
  for(let i = 0; i < text.length ;i++){
      if(text[i].charAt(0)!='p' && text[i].charAt(0)!='c'){    
          aux3[opl] = text[i]
          opl++    
      }
  }

  var clauses = readClauses(aux3)
  for(let o = 0; o< clauses.length; o++){
    clauses[o].splice(clauses[o].indexOf(clauses[o].lenght-1),1)
  }


  let specOk = checkProblemSpecification(text, clauses, variables)

  let result = { 'clauses': [], 'variables': [] }
  if (specOk) {
    result.clauses = clauses
    result.variables = variables
  }
  return result
}

function readClauses(text){//recebe os arrays já sem os zeros e retorna as cláusulas dando split nos ' '
  var clauses = text
  for(let a = 0; a<text.length;a++){
     clauses[a] = clauses[a].split(' ')
  }

  return clauses
}
function readVariables(aux2){ 
  var vr = []
  var t = []//armazena as variáveis já inseridas
  var j = 0
  for(let a = 0; a<aux2.length ;a++){
    for(let b = 0; b < aux2[a].length ;b++){
        if(!t.includes(aux2[a][b])&&aux2[a][b] != ''){
          t[j] = aux2[a][b]
           vr [j] = false
           j++
        }
      }
    }
    return vr
  }

  function checkProblemSpecification(text, clauses, variables){
    var vl
    var c 
    var w = false
    for(let d = 0; d<text.length -1;d++){
      if(text[d].includes('Number of propositional variables')){
          vl = text[d].replace('c Number of propositional variables: ','')
      }
      else if(text[d].includes('Number of clauses:')){
        c = text[d].replace('c Number of clauses: ','')
      }
      else if(text[d].includes('p cnf')){
        let tadc = text[d]
        tadc = tadc.split(' ')
        vl = tadc[tadc.length -2]
        c = tadc[tadc.length -1]

      }
      else if(text[d].includes('c The following are the clauses')){
        w = true
      }
    }

    if((vl == variables.length && c == clauses.length)|| w==true){//checa se o número de variáveis é compatível com as especificações
      return true
    }else {
      return false
    }
  }